// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/BON4/payment/internal/pkg/atypes"
	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactonHistory is an object representing the database table.
type TransactonHistory struct {
	TransactionId      int64             `csv:"TransactionId" boil:"TransactionId" json:"TransactionId" toml:"TransactionId" yaml:"TransactionId"`
	RequestId          int64             `csv:"RequestId" boil:"RequestId" json:"RequestId" toml:"RequestId" yaml:"RequestId"`
	TerminalId         int64             `csv:"TerminalId" boil:"TerminalId" json:"TerminalId" toml:"TerminalId" yaml:"TerminalId"`
	PartnerObjectId    int64             `csv:"PartnerObjectId" boil:"PartnerObjectId" json:"PartnerObjectId" toml:"PartnerObjectId" yaml:"PartnerObjectId"`
	AmountTotal        int64             `csv:"AmountTotal" boil:"AmountTotal" json:"AmountTotal" toml:"AmountTotal" yaml:"AmountTotal"`
	AmountOriginal     int64             `csv:"AmountOriginal" boil:"AmountOriginal" json:"AmountOriginal" toml:"AmountOriginal" yaml:"AmountOriginal"`
	CommissionPS       atypes.Decimal    `csv:"CommissionPS" boil:"CommissionPS" json:"CommissionPS" toml:"CommissionPS" yaml:"CommissionPS"`
	CommissionClient   atypes.Decimal    `csv:"CommissionClient" boil:"CommissionClient" json:"CommissionClient" toml:"CommissionClient" yaml:"CommissionClient"`
	CommissionProvider atypes.Decimal    `csv:"CommissionProvider" boil:"CommissionProvider" json:"CommissionProvider" toml:"CommissionProvider" yaml:"CommissionProvider"`
	DateInput          atypes.DateTime   `csv:"DateInput" boil:"DateInput" json:"DateInput" toml:"DateInput" yaml:"DateInput"`
	DatePost           atypes.DateTime   `csv:"DatePost" boil:"DatePost" json:"DatePost" toml:"DatePost" yaml:"DatePost"`
	Status             TransactionStatus `csv:"Status" boil:"Status" json:"Status" toml:"Status" yaml:"Status"`
	PaymentType        PaymentType       `csv:"PaymentType" boil:"PaymentType" json:"PaymentType" toml:"PaymentType" yaml:"PaymentType"`
	PaymentNumber      string            `csv:"PaymentNumber" boil:"PaymentNumber" json:"PaymentNumber" toml:"PaymentNumber" yaml:"PaymentNumber"`
	ServiceId          int64             `csv:"ServiceId" boil:"ServiceId" json:"ServiceId" toml:"ServiceId" yaml:"ServiceId"`
	Service            string            `csv:"Service" boil:"Service" json:"Service" toml:"Service" yaml:"Service"`
	PayeeId            int64             `csv:"PayeeId" boil:"PayeeId" json:"PayeeId" toml:"PayeeId" yaml:"PayeeId"`
	PayeeName          string            `csv:"PayeeName" boil:"PayeeName" json:"PayeeName" toml:"PayeeName" yaml:"PayeeName"`
	PayeeBankMfo       int64             `csv:"PayeeBankMfo" boil:"PayeeBankMfo" json:"PayeeBankMfo" toml:"PayeeBankMfo" yaml:"PayeeBankMfo"`
	PayeeBankAccount   string            `csv:"PayeeBankAccount" boil:"PayeeBankAccount" json:"PayeeBankAccount" toml:"PayeeBankAccount" yaml:"PayeeBankAccount"`
	PaymentNarrative   string            `csv:"PaymentNarrative" boil:"PaymentNarrative" json:"PaymentNarrative" toml:"PaymentNarrative" yaml:"PaymentNarrative"`

	R *transactonHistoryR `csv:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactonHistoryL  `csv:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactonHistoryColumns = struct {
	TransactionId      string
	RequestId          string
	TerminalId         string
	PartnerObjectId    string
	AmountTotal        string
	AmountOriginal     string
	CommissionPS       string
	CommissionClient   string
	CommissionProvider string
	DateInput          string
	DatePost           string
	Status             string
	PaymentType        string
	PaymentNumber      string
	ServiceId          string
	Service            string
	PayeeId            string
	PayeeName          string
	PayeeBankMfo       string
	PayeeBankAccount   string
	PaymentNarrative   string
}{
	TransactionId:      "TransactionId",
	RequestId:          "RequestId",
	TerminalId:         "TerminalId",
	PartnerObjectId:    "PartnerObjectId",
	AmountTotal:        "AmountTotal",
	AmountOriginal:     "AmountOriginal",
	CommissionPS:       "CommissionPS",
	CommissionClient:   "CommissionClient",
	CommissionProvider: "CommissionProvider",
	DateInput:          "DateInput",
	DatePost:           "DatePost",
	Status:             "Status",
	PaymentType:        "PaymentType",
	PaymentNumber:      "PaymentNumber",
	ServiceId:          "ServiceId",
	Service:            "Service",
	PayeeId:            "PayeeId",
	PayeeName:          "PayeeName",
	PayeeBankMfo:       "PayeeBankMfo",
	PayeeBankAccount:   "PayeeBankAccount",
	PaymentNarrative:   "PaymentNarrative",
}

var TransactonHistoryTableColumns = struct {
	TransactionId      string
	RequestId          string
	TerminalId         string
	PartnerObjectId    string
	AmountTotal        string
	AmountOriginal     string
	CommissionPS       string
	CommissionClient   string
	CommissionProvider string
	DateInput          string
	DatePost           string
	Status             string
	PaymentType        string
	PaymentNumber      string
	ServiceId          string
	Service            string
	PayeeId            string
	PayeeName          string
	PayeeBankMfo       string
	PayeeBankAccount   string
	PaymentNarrative   string
}{
	TransactionId:      "transacton_history.TransactionId",
	RequestId:          "transacton_history.RequestId",
	TerminalId:         "transacton_history.TerminalId",
	PartnerObjectId:    "transacton_history.PartnerObjectId",
	AmountTotal:        "transacton_history.AmountTotal",
	AmountOriginal:     "transacton_history.AmountOriginal",
	CommissionPS:       "transacton_history.CommissionPS",
	CommissionClient:   "transacton_history.CommissionClient",
	CommissionProvider: "transacton_history.CommissionProvider",
	DateInput:          "transacton_history.DateInput",
	DatePost:           "transacton_history.DatePost",
	Status:             "transacton_history.Status",
	PaymentType:        "transacton_history.PaymentType",
	PaymentNumber:      "transacton_history.PaymentNumber",
	ServiceId:          "transacton_history.ServiceId",
	Service:            "transacton_history.Service",
	PayeeId:            "transacton_history.PayeeId",
	PayeeName:          "transacton_history.PayeeName",
	PayeeBankMfo:       "transacton_history.PayeeBankMfo",
	PayeeBankAccount:   "transacton_history.PayeeBankAccount",
	PaymentNarrative:   "transacton_history.PaymentNarrative",
}

// Generated where

type whereHelperatypes_Decimal struct{ field string }

func (w whereHelperatypes_Decimal) EQ(x atypes.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperatypes_Decimal) NEQ(x atypes.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperatypes_Decimal) LT(x atypes.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperatypes_Decimal) LTE(x atypes.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperatypes_Decimal) GT(x atypes.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperatypes_Decimal) GTE(x atypes.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperatypes_DateTime struct{ field string }

func (w whereHelperatypes_DateTime) EQ(x atypes.DateTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperatypes_DateTime) NEQ(x atypes.DateTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperatypes_DateTime) LT(x atypes.DateTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperatypes_DateTime) LTE(x atypes.DateTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperatypes_DateTime) GT(x atypes.DateTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperatypes_DateTime) GTE(x atypes.DateTime) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperTransactionStatus struct{ field string }

func (w whereHelperTransactionStatus) EQ(x TransactionStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperTransactionStatus) NEQ(x TransactionStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperTransactionStatus) LT(x TransactionStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperTransactionStatus) LTE(x TransactionStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperTransactionStatus) GT(x TransactionStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperTransactionStatus) GTE(x TransactionStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperTransactionStatus) IN(slice []TransactionStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperTransactionStatus) NIN(slice []TransactionStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperPaymentType struct{ field string }

func (w whereHelperPaymentType) EQ(x PaymentType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperPaymentType) NEQ(x PaymentType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperPaymentType) LT(x PaymentType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperPaymentType) LTE(x PaymentType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperPaymentType) GT(x PaymentType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperPaymentType) GTE(x PaymentType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperPaymentType) IN(slice []PaymentType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperPaymentType) NIN(slice []PaymentType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TransactonHistoryWhere = struct {
	TransactionId      whereHelperint64
	RequestId          whereHelperint64
	TerminalId         whereHelperint64
	PartnerObjectId    whereHelperint64
	AmountTotal        whereHelperint64
	AmountOriginal     whereHelperint64
	CommissionPS       whereHelperatypes_Decimal
	CommissionClient   whereHelperatypes_Decimal
	CommissionProvider whereHelperatypes_Decimal
	DateInput          whereHelperatypes_DateTime
	DatePost           whereHelperatypes_DateTime
	Status             whereHelperTransactionStatus
	PaymentType        whereHelperPaymentType
	PaymentNumber      whereHelperstring
	ServiceId          whereHelperint64
	Service            whereHelperstring
	PayeeId            whereHelperint64
	PayeeName          whereHelperstring
	PayeeBankMfo       whereHelperint64
	PayeeBankAccount   whereHelperstring
	PaymentNarrative   whereHelperstring
}{
	TransactionId:      whereHelperint64{field: "\"transacton_history\".\"TransactionId\""},
	RequestId:          whereHelperint64{field: "\"transacton_history\".\"RequestId\""},
	TerminalId:         whereHelperint64{field: "\"transacton_history\".\"TerminalId\""},
	PartnerObjectId:    whereHelperint64{field: "\"transacton_history\".\"PartnerObjectId\""},
	AmountTotal:        whereHelperint64{field: "\"transacton_history\".\"AmountTotal\""},
	AmountOriginal:     whereHelperint64{field: "\"transacton_history\".\"AmountOriginal\""},
	CommissionPS:       whereHelperatypes_Decimal{field: "\"transacton_history\".\"CommissionPS\""},
	CommissionClient:   whereHelperatypes_Decimal{field: "\"transacton_history\".\"CommissionClient\""},
	CommissionProvider: whereHelperatypes_Decimal{field: "\"transacton_history\".\"CommissionProvider\""},
	DateInput:          whereHelperatypes_DateTime{field: "\"transacton_history\".\"DateInput\""},
	DatePost:           whereHelperatypes_DateTime{field: "\"transacton_history\".\"DatePost\""},
	Status:             whereHelperTransactionStatus{field: "\"transacton_history\".\"Status\""},
	PaymentType:        whereHelperPaymentType{field: "\"transacton_history\".\"PaymentType\""},
	PaymentNumber:      whereHelperstring{field: "\"transacton_history\".\"PaymentNumber\""},
	ServiceId:          whereHelperint64{field: "\"transacton_history\".\"ServiceId\""},
	Service:            whereHelperstring{field: "\"transacton_history\".\"Service\""},
	PayeeId:            whereHelperint64{field: "\"transacton_history\".\"PayeeId\""},
	PayeeName:          whereHelperstring{field: "\"transacton_history\".\"PayeeName\""},
	PayeeBankMfo:       whereHelperint64{field: "\"transacton_history\".\"PayeeBankMfo\""},
	PayeeBankAccount:   whereHelperstring{field: "\"transacton_history\".\"PayeeBankAccount\""},
	PaymentNarrative:   whereHelperstring{field: "\"transacton_history\".\"PaymentNarrative\""},
}

// TransactonHistoryRels is where relationship names are stored.
var TransactonHistoryRels = struct {
}{}

// transactonHistoryR is where relationships are stored.
type transactonHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*transactonHistoryR) NewStruct() *transactonHistoryR {
	return &transactonHistoryR{}
}

// transactonHistoryL is where Load methods for each relationship are stored.
type transactonHistoryL struct{}

var (
	transactonHistoryAllColumns            = []string{"TransactionId", "RequestId", "TerminalId", "PartnerObjectId", "AmountTotal", "AmountOriginal", "CommissionPS", "CommissionClient", "CommissionProvider", "DateInput", "DatePost", "Status", "PaymentType", "PaymentNumber", "ServiceId", "Service", "PayeeId", "PayeeName", "PayeeBankMfo", "PayeeBankAccount", "PaymentNarrative"}
	transactonHistoryColumnsWithoutDefault = []string{"RequestId", "TerminalId", "PartnerObjectId", "AmountTotal", "AmountOriginal", "CommissionPS", "CommissionClient", "CommissionProvider", "DateInput", "DatePost", "Status", "PaymentType", "PaymentNumber", "ServiceId", "Service", "PayeeId", "PayeeName", "PayeeBankMfo", "PayeeBankAccount", "PaymentNarrative"}
	transactonHistoryColumnsWithDefault    = []string{"TransactionId"}
	transactonHistoryPrimaryKeyColumns     = []string{"TransactionId"}
	transactonHistoryGeneratedColumns      = []string{}
)

type (
	// TransactonHistorySlice is an alias for a slice of pointers to TransactonHistory.
	// This should almost always be used instead of []TransactonHistory.
	TransactonHistorySlice []*TransactonHistory
	// TransactonHistoryHook is the signature for custom TransactonHistory hook methods
	TransactonHistoryHook func(context.Context, boil.ContextExecutor, *TransactonHistory) error

	transactonHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactonHistoryType                 = reflect.TypeOf(&TransactonHistory{})
	transactonHistoryMapping              = queries.MakeStructMapping(transactonHistoryType)
	transactonHistoryPrimaryKeyMapping, _ = queries.BindMapping(transactonHistoryType, transactonHistoryMapping, transactonHistoryPrimaryKeyColumns)
	transactonHistoryInsertCacheMut       sync.RWMutex
	transactonHistoryInsertCache          = make(map[string]insertCache)
	transactonHistoryUpdateCacheMut       sync.RWMutex
	transactonHistoryUpdateCache          = make(map[string]updateCache)
	transactonHistoryUpsertCacheMut       sync.RWMutex
	transactonHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transactonHistoryAfterSelectHooks []TransactonHistoryHook

var transactonHistoryBeforeInsertHooks []TransactonHistoryHook
var transactonHistoryAfterInsertHooks []TransactonHistoryHook

var transactonHistoryBeforeUpdateHooks []TransactonHistoryHook
var transactonHistoryAfterUpdateHooks []TransactonHistoryHook

var transactonHistoryBeforeDeleteHooks []TransactonHistoryHook
var transactonHistoryAfterDeleteHooks []TransactonHistoryHook

var transactonHistoryBeforeUpsertHooks []TransactonHistoryHook
var transactonHistoryAfterUpsertHooks []TransactonHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransactonHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransactonHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransactonHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransactonHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransactonHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransactonHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransactonHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransactonHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransactonHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactonHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactonHistoryHook registers your hook function for all future operations.
func AddTransactonHistoryHook(hookPoint boil.HookPoint, transactonHistoryHook TransactonHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transactonHistoryAfterSelectHooks = append(transactonHistoryAfterSelectHooks, transactonHistoryHook)
	case boil.BeforeInsertHook:
		transactonHistoryBeforeInsertHooks = append(transactonHistoryBeforeInsertHooks, transactonHistoryHook)
	case boil.AfterInsertHook:
		transactonHistoryAfterInsertHooks = append(transactonHistoryAfterInsertHooks, transactonHistoryHook)
	case boil.BeforeUpdateHook:
		transactonHistoryBeforeUpdateHooks = append(transactonHistoryBeforeUpdateHooks, transactonHistoryHook)
	case boil.AfterUpdateHook:
		transactonHistoryAfterUpdateHooks = append(transactonHistoryAfterUpdateHooks, transactonHistoryHook)
	case boil.BeforeDeleteHook:
		transactonHistoryBeforeDeleteHooks = append(transactonHistoryBeforeDeleteHooks, transactonHistoryHook)
	case boil.AfterDeleteHook:
		transactonHistoryAfterDeleteHooks = append(transactonHistoryAfterDeleteHooks, transactonHistoryHook)
	case boil.BeforeUpsertHook:
		transactonHistoryBeforeUpsertHooks = append(transactonHistoryBeforeUpsertHooks, transactonHistoryHook)
	case boil.AfterUpsertHook:
		transactonHistoryAfterUpsertHooks = append(transactonHistoryAfterUpsertHooks, transactonHistoryHook)
	}
}

// OneG returns a single transactonHistory record from the query using the global executor.
func (q transactonHistoryQuery) OneG(ctx context.Context) (*TransactonHistory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single transactonHistory record from the query.
func (q transactonHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TransactonHistory, error) {
	o := &TransactonHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for transacton_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TransactonHistory records from the query using the global executor.
func (q transactonHistoryQuery) AllG(ctx context.Context) (TransactonHistorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TransactonHistory records from the query.
func (q transactonHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransactonHistorySlice, error) {
	var o []*TransactonHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TransactonHistory slice")
	}

	if len(transactonHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TransactonHistory records in the query using the global executor
func (q transactonHistoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TransactonHistory records in the query.
func (q transactonHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count transacton_history rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q transactonHistoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q transactonHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if transacton_history exists")
	}

	return count > 0, nil
}

// TransactonHistories retrieves all the records using an executor.
func TransactonHistories(mods ...qm.QueryMod) transactonHistoryQuery {
	mods = append(mods, qm.From("\"transacton_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"transacton_history\".*"})
	}

	return transactonHistoryQuery{q}
}

// FindTransactonHistoryG retrieves a single record by ID.
func FindTransactonHistoryG(ctx context.Context, transactionId int64, selectCols ...string) (*TransactonHistory, error) {
	return FindTransactonHistory(ctx, boil.GetContextDB(), transactionId, selectCols...)
}

// FindTransactonHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactonHistory(ctx context.Context, exec boil.ContextExecutor, transactionId int64, selectCols ...string) (*TransactonHistory, error) {
	transactonHistoryObj := &TransactonHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transacton_history\" where \"TransactionId\"=$1", sel,
	)

	q := queries.Raw(query, transactionId)

	err := q.Bind(ctx, exec, transactonHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from transacton_history")
	}

	if err = transactonHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return transactonHistoryObj, err
	}

	return transactonHistoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TransactonHistory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactonHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transacton_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactonHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactonHistoryInsertCacheMut.RLock()
	cache, cached := transactonHistoryInsertCache[key]
	transactonHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactonHistoryAllColumns,
			transactonHistoryColumnsWithDefault,
			transactonHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactonHistoryType, transactonHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactonHistoryType, transactonHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transacton_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transacton_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into transacton_history")
	}

	if !cached {
		transactonHistoryInsertCacheMut.Lock()
		transactonHistoryInsertCache[key] = cache
		transactonHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TransactonHistory record using the global executor.
// See Update for more documentation.
func (o *TransactonHistory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TransactonHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactonHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transactonHistoryUpdateCacheMut.RLock()
	cache, cached := transactonHistoryUpdateCache[key]
	transactonHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactonHistoryAllColumns,
			transactonHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update transacton_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transacton_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactonHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactonHistoryType, transactonHistoryMapping, append(wl, transactonHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update transacton_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for transacton_history")
	}

	if !cached {
		transactonHistoryUpdateCacheMut.Lock()
		transactonHistoryUpdateCache[key] = cache
		transactonHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q transactonHistoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q transactonHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for transacton_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for transacton_history")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactonHistorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactonHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactonHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transacton_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactonHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transactonHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transactonHistory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TransactonHistory) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactonHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transacton_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactonHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactonHistoryUpsertCacheMut.RLock()
	cache, cached := transactonHistoryUpsertCache[key]
	transactonHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactonHistoryAllColumns,
			transactonHistoryColumnsWithDefault,
			transactonHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactonHistoryAllColumns,
			transactonHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert transacton_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transactonHistoryPrimaryKeyColumns))
			copy(conflict, transactonHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transacton_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transactonHistoryType, transactonHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactonHistoryType, transactonHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert transacton_history")
	}

	if !cached {
		transactonHistoryUpsertCacheMut.Lock()
		transactonHistoryUpsertCache[key] = cache
		transactonHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TransactonHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TransactonHistory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TransactonHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactonHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransactonHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactonHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"transacton_history\" WHERE \"TransactionId\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from transacton_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for transacton_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q transactonHistoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q transactonHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transactonHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transacton_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transacton_history")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TransactonHistorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactonHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transactonHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactonHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transacton_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactonHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transactonHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transacton_history")
	}

	if len(transactonHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TransactonHistory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no TransactonHistory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactonHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransactonHistory(ctx, exec, o.TransactionId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactonHistorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TransactonHistorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactonHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactonHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactonHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transacton_history\".* FROM \"transacton_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactonHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransactonHistorySlice")
	}

	*o = slice

	return nil
}

// TransactonHistoryExistsG checks if the TransactonHistory row exists.
func TransactonHistoryExistsG(ctx context.Context, transactionId int64) (bool, error) {
	return TransactonHistoryExists(ctx, boil.GetContextDB(), transactionId)
}

// TransactonHistoryExists checks if the TransactonHistory row exists.
func TransactonHistoryExists(ctx context.Context, exec boil.ContextExecutor, transactionId int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transacton_history\" where \"TransactionId\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, transactionId)
	}
	row := exec.QueryRowContext(ctx, sql, transactionId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if transacton_history exists")
	}

	return exists, nil
}
